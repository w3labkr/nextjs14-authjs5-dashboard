// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// Prisma ORM supports formatting .prisma files automatically.
// Auto formatting: https://www.prisma.io/docs/orm/prisma-schema/overview#auto-formatting
generator client {
  provider = "prisma-client-js"
}

// Auth.js uses camelCase for its database rows while respecting the conventional snake_case formatting for OAuth-related values.
// If the mixed casing is an issue for you, most adapters have a dedicated documentation section on how to force a casing convention.

// Naming Conventions
// If mixed snake_case and camelCase column names is an issue for you and/or your underlying database system, we recommend using Prisma’s @map() feature to change the field names.
// This won’t affect Auth.js, but will allow you to customize the column names to whichever naming convention you prefer.
datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// The User model is for information such as the user’s name and email address.
// Email address is optional, but if one is specified for a User, then it must be unique.
model User {
  // OAuth Privoder
  id                String    @id @default(cuid())
  name              String?
  email             String    @unique
  emailVerified     DateTime? @map("email_verified")
  image             String?
  // Role-based access control
  username          String    @unique @default(uuid())
  usernameChangedAt DateTime? @map("username_changed_at")
  password          String?
  passwordChangedAt DateTime? @map("password_changed_at")
  code              String? // one-time password
  plan              String?   @default("free")
  role              String?   @default("guest")
  isAdmin           Boolean?  @default(false) @map("is_admin")
  isBan             Boolean?  @default(false) @map("is_ban")
  bannedUntil       DateTime? @map("banned_until")

  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  // Credentials Provider
  access_token  String? @db.Text
  expires_at    Int?
  refresh_token String? @db.Text

  @@map("users")
}

// The Account model is for information about accounts associated with a User.
// A single User can have multiple Account(s), but each Account can only have one User.
model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  access_token      String? @db.Text
  expires_at        Int?
  refresh_token     String? @db.Text
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique(name: "provider_providerAccountId", [provider, providerAccountId])
  @@map("accounts")
}

// The Session model is used for database sessions and it can store arbitrary data for an active user session.
// A single User can have multiple Session(s), each Session can only have one User.
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  @@map("sessions")
}

// The VerificationToken model is used to store tokens for email-based magic-link sign in.
model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique(name: "identifier_token", [identifier, token])
  @@map("verification_tokens")
}

// Optional for WebAuthn support
model Authenticator {
  id                   String  @id @default(cuid())
  credentialID         String  @unique @map("credential_id")
  userId               String  @map("user_id")
  providerAccountId    String  @map("provider_account_id")
  credentialPublicKey  String  @map("credential_public_key")
  counter              Int
  credentialDeviceType String  @map("credential_device_type")
  credentialBackedUp   Boolean @map("credential_backed_up")
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique(name: "userId_credentialID", [userId, credentialID])
  @@map("authenticators")
}
